name: Build and Push to ECR

on:
  push:
    branches: [ main, 'feature/*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

env:
  AWS_REGION: us-west-2
  ECR_REGISTRY: 123456789012.dkr.ecr.us-west-2.amazonaws.com
  ECR_REPOSITORY: saar/spotify-app

jobs:
  test:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build test image
      working-directory: ./
      run: |
        docker build -t spotify_app_test:latest .

    - name: Start MongoDB for testing
      working-directory: ./
      run: |
        docker-compose up -d mongodb

    - name: Wait for MongoDB to be ready
      run: |
        sleep 30

    - name: Run unit tests
      working-directory: ./
      run: |
        docker-compose run --rm -e TEST_TYPE=unit test
      
    - name: Run integration tests
      working-directory: ./
      run: |
        docker-compose run --rm -e TEST_TYPE=integration test

    - name: Cleanup test containers
      if: always()
      working-directory: ./
      run: |
        docker-compose down -v

  build-and-push:
    runs-on: self-hosted
    needs: test
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get latest tag and increment version
      id: version
      run: |
        # Get the latest tag, default to 1.0.0 if no tags exist
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")
        echo "Latest tag: $latest_tag"
        
        # Extract version parts (assuming format like v1.0.0 or 1.0.0)
        version=$(echo $latest_tag | sed 's/^v//')
        major=$(echo $version | cut -d. -f1)
        minor=$(echo $version | cut -d. -f2)
        patch=$(echo $version | cut -d. -f3)
        
        # Increment patch version
        new_patch=$((patch + 1))
        new_version="$major.$minor.$new_patch"
        new_tag="$new_version"
        
        echo "New version: $new_version"
        echo "New tag: $new_tag"
        echo "version=$new_version" >> $GITHUB_OUTPUT
        echo "tag=$new_tag" >> $GITHUB_OUTPUT

    - name: Create and push new tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ steps.version.outputs.tag }}
        git push origin ${{ steps.version.outputs.tag }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      working-directory: ./
      run: |
        # Build the Docker image with version and latest tags
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.version.outputs.version }} .
        
        # Push images to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.version.outputs.version }}
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT

    - name: Image digest
      run: echo ${{ steps.build-image.outputs.image }}
      
    - name: Debug token availability
      run: |
        if [ -z "${{ secrets.GITOPS_TOKEN }}" ]; then
          echo "PAT_TOKEN is empty or not set yet"
        else
          echo "PAT_TOKEN is available"
        fi
    - name: Checkout GitOps repository
      uses: actions/checkout@v4
      with:
        repository: your-username/spotify-stats-gitops 
        path: gitops-repo
        token: ${{ secrets.GITOPS_TOKEN }}

    - name: Update Helm charts and values
      run: |
        cd gitops-repo
        VERSION=${{ steps.version.outputs.version }}
        
        # List files to debug
        echo "=== Repository structure ==="
        ls -la
        echo "=== GitOps directory ==="
        ls -la gitops/ || echo "No gitops directory found"
        
        # Update umbrella chart (spotify-stat-helm/Chart.yaml)
        sed -i "s/^version: .*/version: ${VERSION}/" spotify-stat-helm/Chart.yaml
        sed -i "s/^appVersion: .*/appVersion: \"${VERSION}\"/" spotify-stat-helm/Chart.yaml
        
        # Update app chart version and appVersion (spotify-stat-helm/charts/spotify-stat-app/Chart.yaml)
        sed -i "s/^version: .*/version: ${VERSION}/" spotify-stat-helm/charts/spotify-stat-app/Chart.yaml
        sed -i "s/^appVersion: .*/appVersion: \"${VERSION}\"/" spotify-stat-helm/charts/spotify-stat-app/Chart.yaml
        
        # Update image tag in app chart values.yaml
        sed -i "s/tag: .*/tag: ${VERSION}/" spotify-stat-helm/charts/spotify-stat-app/values.yaml
        
        # Update dependency version in umbrella chart
        sed -i "/name: spotify-stat-app/,/repository: file/ s/version: .*/version: ${VERSION}/" spotify-stat-helm/Chart.yaml
        
        # Verify the changes
        echo "=== Updated umbrella Chart.yaml ==="
        grep -E "(^version:|^appVersion:)" spotify-stat-helm/Chart.yaml
        echo "=== Updated app Chart.yaml ==="
        grep -E "(^version:|^appVersion:)" spotify-stat-helm/charts/spotify-stat-app/Chart.yaml
        echo "=== Updated values.yaml ==="
        grep -A 2 -B 2 "tag:" spotify-stat-helm/charts/spotify-stat-app/values.yaml

    - name: Commit and push GitOps changes
      run: |
        cd gitops-repo
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Add all modified chart files
        git add spotify-stat-helm/Chart.yaml
        git add spotify-stat-helm/charts/spotify-stat-app/Chart.yaml
        git add spotify-stat-helm/charts/spotify-stat-app/values.yaml
        
        git commit -m "Update Spotify app to version ${{ steps.version.outputs.version }}
        
        Automated update from CI/CD pipeline:
        - Updated umbrella chart version and appVersion
        - Updated app chart version and appVersion  
        - Updated image tag in values.yaml
        - Updated dependency version in umbrella chart
        - Image: $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.version.outputs.version }}
        - Git tag: ${{ steps.version.outputs.tag }}
        - Commit: $GITHUB_SHA"
        
        git push origin main